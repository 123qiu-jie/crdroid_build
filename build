#!/bin/bash
# Build crDroid and optionally upload to remote server
# Author: Gwolf2u (gwolfu@xda)
script_version=6.0.4

# Specify colors utilized in the terminal
red=$(tput setaf 1)                         #  red
grn=$(tput setaf 2)                         #  green
ylw=$(tput setaf 3)                         #  yellow
blu=$(tput setaf 4)                         #  blue
cya=$(tput rev)$(tput bold)$(tput setaf 6)  #  bold cyan reversed
ylr=$(tput rev)$(tput bold)$(tput setaf 3)  #  bold yellow reversed
grr=$(tput rev)$(tput bold)$(tput setaf 2)  #  bold green reversed
rer=$(tput rev)$(tput bold)$(tput setaf 1)  #  bold red reversed
txtrst=$(tput sgr0)                         #  Reset

#detect path where the script is running
script_path="`dirname \"$0\"`"
script_path="`( cd \"$script_path\" && pwd )`"
if [ -z "$script_path" ] ; then
    # error; for some reason, the path is not accessible
    echo "${red}Can not read run path"
    echo "Build can not continue"${txtrst}
    exit 1  # fail
fi

if ! [ -x "$(command -v lftp)" ]; then
	sudo apt install lftp
	if ! [ -x "$(command -v lftp)" ]; then
		printf "${red}lftp could not be installed automatically. Please seek in software repository for it and install manually\nAborting...\n" >&2
		exit 1
	fi
fi

arg=$1
case $arg in
    "add" )
        echo "Add a new device:"
        echo "Format: <device codename>,<remote upload path>"
        read newdevice
        echo $newdevice >> devices.conf
        echo "Added"
        exit 0 ;;
    "remove" )
        if [ ! -f devices.conf ]; then
            echo "There are no devices saved"
            exit 0
        fi
        echo "Enter line number to delete"    
        awk '$0!=""{print NR, $0}' devices.conf
        read delline
        sed -i $delline'd' devices.conf
        echo "Deleted"
        exit 0 ;;
    "list" )
        if [ ! -f devices.conf ]; then
            echo "There are no devices saved"
            exit 0
        fi
        echo "Listing all devices:"
        cat $script_path"/devices.conf"
        exit 0 ;;
    "clean" )
        echo "Cleaned up configuration"
        rm -f $script_path"/config.conf"
        exit 0 ;;
    "clear" )
        echo "Cleaned up all devices"
        rm -f $script_path"/devices.conf"
        exit 0 ;;
    "help" )
        echo "This build script is used to be able to build crDroid and upload the builds to remote server"
        echo "Usage: ./build [OPTION]"
        echo ""
        echo "Commands supported:"
        echo "add       - adds a device to be built"
        echo "remove    - removes a device from build list"
        echo "list      - lists all devices that are configured to be built"
        echo "clean     - cleans up the configuration"
        echo "clear     - clears up all the devices on build list"
        exit 0 ;;
esac

echo "==========================================="
echo "${cya}Initiate build script - v$script_version for crDroid 5.x"${txtrst}
echo "==========================================="

#check script updates
echo "Running update check..."
wget -O check -q https://raw.githubusercontent.com/crdroidandroid/crdroid_build/9.0/build
linenr=$(grep -n "script_version" check | grep -Eo '^[^:]+')
array=( $linenr )
online_version=$(sed -n ${array[0]}'p' < check | cut -d "=" -f 2 | sed -r 's/[.]+//g')
rm -f check
script_version=$(echo $script_version | sed -r 's/[.]+//g')
if [ "$online_version" -gt "$script_version" ]; then
    echo "${ylr}A new version of this build script is available on GitHub"
    echo "Run below command to update before re-attempting to run again"
    echo "${rer}curl -LJO https://raw.githubusercontent.com/crdroidandroid/crdroid_build/9.0/build${txtrst}"
    read -p "${ylr}Press enter to exit${txtrst}"
    exit 0
else
    echo "${grr}Seems you are running latest build script version available ã‹¡${txtrst}"
fi

#migrate to new config.conf
old_config=$script_path"/config"
config=$script_path"/config.conf"
if [ -f $old_config ]; then
    echo ${ylr}"Migrating to new config.conf from conf"${txtrst}
    mv $old_config $config
    sed -i 's/config_version=1/config_version=2/g' $config
    sleep 1s
fi

if [ ! -f $config ]; then
    echo "Configuration file is missing"
    echo "Creating..."
    echo "Please enter the path where crDroid folder is located (full path ex:/home/<user>/crDroid)"
    read set_crDroid_path
    echo "How much RAM can JACK use for compiling? (numeric value ex: 16)"
    read set_RAM
    echo "How much space (in GB) can be used to ccache? (numeric value ex: 30)"
    read set_ccachesize
    echo "Upload compilation to remote server at end of build?"
    set_upload_build=false
    select yn in "Yes" "No"; do
        case $yn in
            Yes ) set_upload_build=true; break;;
            No ) set_upload_build=false;break;;
        esac
    done
    if [ "$set_upload_build" = true ] ; then
        echo "Enter remote hostname (ex: web.sourceforge.net): "
        read set_remote_hostname
        echo "Enter remote username:"
        read set_remote_username
        echo "Enter remote password:"
        read set_remote_password
    fi

    #create config file
	echo "config_version=2" >> config
    echo "crDroid_path="$set_crDroid_path >> config
    echo "RAM="$set_RAM >> config
    echo "ccachesize="$set_ccachesize"G" >> config
    echo "upload_build="$set_upload_build >> config
    echo "remote_hostname="$set_remote_hostname >> config
    echo "remote_username="$set_remote_username >> config
    echo "remote_password="$set_remote_password >> config
    echo "${grn}Successfully created configuration file at ${ylw}$script_path/config.conf${txtrst}"
    echo "Please run \"${grn}./build add${txtrst}\" to add new devices for build script"
    echo "For a list of availble commands, run \"${grn}./build help${txtrst}\""
    exit 0
fi

#read configuration
source config.conf
if [[ -z ${config_version+x} ]] || (( "$config_version" < "2" )); then
	echo "${red}Configuration file is outdated. Please run ${ylw}./build clean ${red}followed by ${ylw}./build ${red}to regenerate it"
	exit 1
fi

#migrate to new devices.conf
old_devices=$script_path"/devices"
devices=$script_path"/devices.conf"
if [ -f $old_devices ]; then
    echo ${ylr}"Migrating to new devices.conf from devices"${txtrst}
    mv $old_devices $devices
    sleep 1s
fi

if [ ! -f $devices ]; then
    echo "${red}There are no devices configured to be built"
    echo "Run \"./build add\" to add a new device"${txtrst}
    exit 1  # fail
fi

#check if already synced
crdroid_synced=$crDroid_path/vendor/lineage/config/common.mk
if [ ! -f $crdroid_synced ]; then
    echo "${ylw}Detected missing first sync... atempting first time sync..."${txtrst}
    cd $crDroid_path
    repo sync --force-sync --no-clone-bundle
fi

if [ ! -f $crdroid_synced ]; then
    read -p "${red}Something went wrong :( - Maybe misconfigured script!?"
    exit
fi

PATH=~/bin:$PATH
export LC_ALL=C

cd $crDroid_path
echo "${blu}Run sync?${txtrst}"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) repo sync --force-sync --no-clone-bundle; break;;
        No ) break;;
    esac
done

echo "${blu}For how many days you want changelog to be generated?${txtrst}"
read days
until [[ $days =~ ^-?[0-9]+$ ]]; do
    echo "Invalid input - only numbers are allowed"
    read days
done
export changelog_days=$days
echo "${grn}Roger... $days days will be set for changelog generation${txtrst}"

echo "${blu}Make clean build?${txtrst}"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) . build/envsetup.sh && make clean; break;;
        No ) break;;
    esac
done

#create a commands.txt files and run the commands from it before build initializes 
commands=$script_path/commands.txt
if [ -f $commands ]; then
    . build/envsetup.sh
    cat $script_path/commands.txt | while read line
    do
        $line
    done
fi

function checkupload()
{
    testval=$(lftp sftp://$1:$2@$3 -e "set sftp:auto-confirm yes; cd $4 && ls -l | grep $5; bye")
    if [ -z "$testval" ]
    then
        return 1
    else
        return 0
    fi
}

#Set CCache size
export USE_CCACHE=1
$crDroid_path/prebuilts/misc/linux-x86/ccache/ccache -M $ccachesize

#detect android version based on common.mk
major_check=$(grep -n "PRODUCT_VERSION_MAJOR" $crDroid_path/vendor/lineage/config/common.mk | grep -Eo '^[^:]+')
array=( $major_check )
android_major=$(sed -n ${array[0]}'p' < $crDroid_path/vendor/lineage/config/common.mk | cut -d "=" -f 2 | sed -r 's/[.]+//g' | tr -d '[:space:]')
minor_check=$(grep -n "PRODUCT_VERSION_MINOR" $crDroid_path/vendor/lineage/config/common.mk | grep -Eo '^[^:]+')
array=( $minor_check )
android_minor=$(sed -n ${array[0]}'p' < $crDroid_path/vendor/lineage/config/common.mk | cut -d "=" -f 2 | sed -r 's/[.]+//g' | tr -d '[:space:]')
android=$android_major"."$android_minor
cr_check=$(grep -n "CR_VERSION" $crDroid_path/vendor/lineage/config/common.mk | grep -Eo '^[^:]+')
array=( $cr_check )
crDroid=$(sed -n ${array[0]}'p' < $crDroid_path/vendor/lineage/config/common.mk | cut -d "=" -f 2 | tr -d '[:space:]')

INFO=()

echo "==========================================="
echo "${ylr}Setting build environment"${txtrst}
echo "-------------------------------------------"
echo "Script path set to: "${grn}$script_path${txtrst}
echo "crDroid path set to: "${grn}$crDroid_path${txtrst}
echo "Jack RAM usage set to: "${grn}$RAM"GB RAM"${txtrst}
echo "CCache size set to: "${grn}$ccachesize"B"${txtrst}
echo "Upload complete build to remote server?: "${grn}$upload_build${txtrst}
echo "Trying to compile crDroid "${grn}$crDroid${txtrst}" based on Android "${grn}$android${txtrst}
echo "==========================================="
echo ""

echo "${ylw}Initiate build for all devices...${txtrst}"
file=$devices
while IFS= read -r line
do
    IFS=', ' read -r -a device_uploadpath <<< "$line"
    #set device name 
    device=${device_uploadpath[0]}
    if [[ $device == *"#"* ]]; then
        device="${device//#}"
        echo "${red}Found comment (#): Skipping build for ${ylw}$device ${red}${txtrst}"
        INFO+=('1 '$device' (Reason: instruction to skip found in devices)')
    else
        echo "${grn}Now building "${ylw}$device${txtrst}
    
        #set BuildID - aka name of the zip file from OUT folder at the end of the build
        BuildID="crDroidAndroid-"$android"-"$(date -d "$D" '+%Y')$(date -d "$D" '+%m')$(date -d "$D" '+%d')"-"$device"-v"$crDroid".zip"
        
        #Jack settings
        echo "Adding "$RAM" RAM to JACK"
        export JACK_SERVER_VM_ARGUMENTS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx"$RAM"g"
    
        #initiate build script and start actual build
        . build/envsetup.sh
        brunch $device
        
        #define upload file path
        uploadfile=$crDroid_path/out/target/product/$device/$BuildID
        echo "Checking build result status..."
        if [ -e "$uploadfile" ]; then
            echo "${grn}Seems compilation is ready for $device${txtrst}"
            if [ "$upload_build" = true ] ; then
                echo "${grn}Uploading new $device build to $remote_hostname${txtrst}"
                lftp sftp://$remote_username:$remote_password@$remote_hostname -e "set sftp:auto-confirm yes; mkdir -f ${device_uploadpath[1]}; cd ${device_uploadpath[1]}; put $uploadfile; bye"
                echo "${grn}Checking if upload was pushed to host...${txtrst}"
                if checkupload $remote_username $remote_password $remote_hostname ${device_uploadpath[1]} $BuildID; then
                    echo "${grn}We go on now as all seems fine${txtrst}"
                    INFO+=('2 '$device)
                else
                    echo "${red}Failed to upload${txtrst}"
                    INFO+=('1 '$device' (Reason: Upload failed, however compilation appears to be made just fine)')
                fi
            else
                INFO+=('3 '$device)
			fi
		else 
			echo "${red}Device "$device "did not produce a proper build${txtrst}"
			INFO+=('0 '$device' (Reason: unknown - better run a new build manually)')
        fi
    fi
done < "$file"

echo ${grr}"Script finished with following results"${txtrst}
for i in "${INFO[@]}"
do
	#echo $i
    if [[ $i == *"0"* ]]; then
        codename=${i//0}
        echo "${red}Compilation error for device" $codename${txtrst}
    elif [[ $i == *"1"* ]]; then
        codename=${i//1}
        echo "${ylw}Warning for device" $codename${txtrst}
    elif [[ $i == *"2"* ]]; then
        codename=${i//2}
        echo "${grn}Device" $codename "compiled and uploaded successfully ã‹¡${txtrst}"
    else
        codename=${i//3}
        echo "${grn}Device" $codename "compiled successfully ã‹¡ (consider uploading build?)${txtrst}"
    fi
done

read -p "Press enter to exit"
