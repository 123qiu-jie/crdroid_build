#!/bin/bash
#Build crDroid and optionally upload to FTP for all devices in devices.txt

#   << Start configuration >>
#crDroid_path is the location of build environment root path aka {ANDROID_BUILD_TOP}
crDroid_path=~/Desktop/CR
#set how much RAM is used by JACK if building with
RAM=10
#set if you want to save changelog file to script_path (from where the script runs) at end of build (useful to add changelog info to forums and so on... easy to find)
copy_changelog=true
#FTP config
upload_build=true
FTP_hostname="ftp://domain.tld"
FTP_username=username
FTP_password=password
#   << End configuration >>

# Specify colors utilized in the terminal
red=$(tput setaf 1)                         #  red
grn=$(tput setaf 2)                         #  green
ylw=$(tput setaf 3)                         #  yellow
blu=$(tput setaf 4)                         #  blue
cya=$(tput rev)$(tput bold)$(tput setaf 6)  #  bold cyan reversed
txtrst=$(tput sgr0)                         #  Reset

#detect path where the script is running
script_path="`dirname \"$0\"`"              # relative
script_path="`( cd \"$script_path\" && pwd )`"  # absolutized and normalized
if [ -z "$script_path" ] ; then
    # error; for some reason, the path is not accessible
    echo "${red}Can not read run path"
    echo "Build can not continue"${txtrst}
    exit 1  # fail
fi

#check if devices,txt exists
devices=$script_path/devices.txt
if [ ! -f $devices ]; then
    echo "${red}devices.txt missing"
    echo "Build can not continue"${txtrst}
    exit 1  # fail
fi

#check if synced already
crdroid_synced=$crDroid_path/vendor/cm/config/crdroid.mk
if [ ! -f $crdroid_synced ]; then
    echo "${ylw}Detected missing first sync... atempting first time sync..."${txtrst}
    cd $crDroid_path
    repo sync -f --force-sync --no-clone-bundle
fi

#detect android version based on crdroid.mk
rl2="`sed -n '2p' $crDroid_path/vendor/cm/config/crdroid.mk`"
set -- "$rl2"
IFS=" "; declare -a android_major=($*) 
rl3="`sed -n '3p' $crDroid_path/vendor/cm/config/crdroid.mk`"
set -- "$rl3"
IFS=" "; declare -a android_minor=($*) 
android=${android_major[2]}"."${android_minor[2]}

#detect crDroid version based on crdroid.mk
rl6="`sed -n '6p' $crDroid_path/vendor/cm/config/crdroid.mk`"
set -- "$rl6"
IFS=" "; declare -a crDroid_version=($*)
crDroid=${crDroid_version[2]} 

echo "==========================================="
echo "${cya}Initiate build script - v2.2 by Gabriel Lup"${txtrst}
echo "-------------------------------------------"
echo "Script path set to: "${grn}$script_path${txtrst}
echo "crDroid path set to: "${grn}$crDroid_path${txtrst}
echo "Jack RAM usage set to: "${grn}$RAM"GB RAM"${txtrst}
echo "Copy changelog to script path at end of build?: "${grn}$copy_changelog${txtrst}
echo "Upload complete build to FTP?: "${grn}$upload_build${txtrst}
echo "Trying to compile crDroid "${grn}$crDroid${txtrst}" based on Android "${grn}$android${txtrst}
echo "==========================================="
echo ""

#cleanup errors.txt if exists
errors=$script_path/errors.txt
if [ -e $errors ]; then
    rm -f $errors
fi

#cleanup old changelog.txt
changelog=$script_path/changelog.txt
if [ -e $changelog ]; then
    rm -f $changelog
fi

cd $crDroid_path
echo "${blu}Run sync?${txtrst}"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) repo sync -f --force-sync --no-clone-bundle; break;;
        No ) break;;
    esac
done

echo "${blu}Make clean build?${txtrst}"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) . build/envsetup.sh && make clean; break;;
        No ) break;;
    esac
done

echo "${ylw}Initiate build for all devices...${txtrst}" #described in devices.txt
cat $script_path/devices.txt | while read line
do
    IFS=', ' read -r -a device_uploadpath <<< "$line"
    #set device name 
    device=${device_uploadpath[0]}
    echo "${grn}Now building "${ylw}$device${txtrst}
    
    #set BuildID - aka name of the zip file from OUT folder at the end of the build  
    BuildID="crDroidAndroid-"$android"-"$(date -d "$D" '+%Y')$(date -d "$D" '+%m')$(date -d "$D" '+%d')"-"$device"-v"$crDroid".zip"

    #Jack settings
    echo "Adding "$RAM" RAM to JACK"
    export JACK_SERVER_VM_ARGUMENTS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx"$RAM"g"
    ./prebuilts/sdk/tools/jack-admin kill-server
    ./prebuilts/sdk/tools/jack-admin start-server
    
    #initiate build script and start actual build
    . build/envsetup.sh
    brunch $device

    #define upload file path
    uploadfile=$crDroid_path/out/target/product/$device/$BuildID
    echo "Checking build result status..."
    if [ -e "$uploadfile" ]; then
        echo "${grn}Seems compilation is ready!${txtrst}"
        if [ "$upload_build" = true ] ; then
	        echo "${grn}Uploading new "$device" build to FTP server${txtrst}"
            curl -T $uploadfile $FTP_hostname/${device_uploadpath[1]} --user $FTP_username:$FTP_password
            res=$?
            if test "$res" != "0"; then
                echo "${red}Upload of build for device $device failed with code $res${txtrst}"
                echo "Upload of build for device $device failed with code $res" >> $script_path/errors.txt
            fi
        fi

        if [ "$copy_changelog" = true ] ; then
            echo "Copy changelog file to "$script_path
            cp $crDroid_path/out/target/product/$device/system/etc/Changelog.txt $script_path/changelog.txt	
        fi
    else 
	    echo "${red}Device "$device "did not produce a proper build${txtrst}"
        echo "Device "$device "did not produce a proper build" >> $script_path/errors.txt
    fi
done

if [ -e $errors ]; then
    echo "${ylw}Build script finished but with following errors :(${txtrst}"
    cat $script_path/errors.txt | while read line
    do
        echo $line
    done
else
    echo "${grn}All devices were built successfully! :)${txtrst}"
fi


